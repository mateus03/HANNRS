"""autogenerated by genpy from hannrs_msgs/InteractionSet.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class InteractionSet(genpy.Message):
  _md5sum = "bb76bfc545446f6e2a45fcee2a9e6bc8"
  _type = "hannrs_msgs/InteractionSet"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point center
std_msgs/Float64 radius
std_msgs/Float64 importance

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Float64
float64 data
"""
  __slots__ = ['center','radius','importance']
  _slot_types = ['geometry_msgs/Point','std_msgs/Float64','std_msgs/Float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       center,radius,importance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InteractionSet, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.radius is None:
        self.radius = std_msgs.msg.Float64()
      if self.importance is None:
        self.importance = std_msgs.msg.Float64()
    else:
      self.center = geometry_msgs.msg.Point()
      self.radius = std_msgs.msg.Float64()
      self.importance = std_msgs.msg.Float64()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5d.pack(_x.center.x, _x.center.y, _x.center.z, _x.radius.data, _x.importance.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.radius is None:
        self.radius = std_msgs.msg.Float64()
      if self.importance is None:
        self.importance = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.center.x, _x.center.y, _x.center.z, _x.radius.data, _x.importance.data,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5d.pack(_x.center.x, _x.center.y, _x.center.z, _x.radius.data, _x.importance.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Point()
      if self.radius is None:
        self.radius = std_msgs.msg.Float64()
      if self.importance is None:
        self.importance = std_msgs.msg.Float64()
      end = 0
      _x = self
      start = end
      end += 40
      (_x.center.x, _x.center.y, _x.center.z, _x.radius.data, _x.importance.data,) = _struct_5d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5d = struct.Struct("<5d")
